<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Qualifying Candidates for Loop Unrolling Up one level </title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m33733</md:content-id>
  <md:title>Qualifying Candidates for Loop Unrolling Up one level </md:title>
  <md:abstract/>
  <md:uuid>b9366783-aee4-40c6-b230-c7ea31752a7e</md:uuid>
</metadata>

<content>
      <para id="id1168146483364">Assuming a large value for N, the previous loop was an ideal candidate for loop unrolling. The iterations could be executed in any order, and the loop innards were small. But as you might suspect, this isn’t always the case; some kinds of loops can’t be unrolled so easily. Additionally, the way a loop is used when the program runs can disqualify it for loop unrolling, even if it looks promising.</para>
      <para id="id1168146698186">In this section we are going to discuss a few categories of loops that are generally not prime candidates for unrolling, and give you some ideas of what you can do about them. We talked about several of these in the previous chapter as well, but they are also relevant here.</para>
      <section id="id1168146805884">
        <title>Loops with Low Trip Counts</title>
        <para id="id1168146680959">To be effective, loop unrolling requires a fairly large number of iterations in the original loop. To understand why, picture what happens if the total iteration count is low, perhaps less than 10, or even less than 4. With a trip count this low, the preconditioning loop is doing a proportionately large amount of the work. It’s not supposed to be that way. The preconditioning loop is supposed to catch the few leftover iterations missed by the unrolled, main loop. However, when the trip count is low, you make one or two passes through the unrolled loop, plus one or two passes through the preconditioning loop. In other words, you have more clutter; the loop shouldn’t have been unrolled in the first place.</para>
        <para id="id7107052">Probably the only time it makes sense to unroll a loop with a low trip count is when the number of iterations is constant and known at compile time. For instance, suppose you had the following loop:</para>
        <code id="id1168146340393" display="block"><newline/>
      PARAMETER (NITER = 3) 
      DO I=1,NITER
        A(I) = B(I) * C 
      ENDDO
    </code>
        <para id="id1168146577733">Because <code display="inline">NITER</code> is hardwired to 3, you can safely unroll to a depth of 3 without worrying about a preconditioning loop. In fact, you can throw out the loop structure altogether and leave just the unrolled loop innards:</para>
        <code id="id1168146339054" display="block"><newline/>
      PARAMETER (NITER = 3) 
      A(1) = B(1) * C
      A(2) = B(2) * C 
      A(3) = A(3) * C
    </code>
        <para id="id9023015">Of course, if a loop’s trip count is low, it probably won’t contribute significantly to the overall runtime, unless you find such a loop at the center of a larger loop. Then you either want to unroll it completely or leave it alone.</para>
      </section>
      <section id="id7715597">
        <title>Fat Loops</title>
        <para id="id1168146582108">Loop unrolling helps performance because it fattens up a loop with more calculations per iteration. By the same token, if a particular loop is already fat, unrolling isn’t going to help. The loop overhead is already spread over a fair number of instructions. In fact, unrolling a fat loop may even slow your program down because it increases the size of the text segment, placing an added burden on the memory system (we’ll explain this in greater detail shortly). A good rule of thumb is to look elsewhere for performance when the loop innards exceed three or four statements.</para>
      </section>
      <section id="id1168146233598">
        <title>Loops Containing Procedure Calls</title>
        <para id="id1168149879272">As with fat loops, loops containing subroutine or function calls generally aren’t good candidates for unrolling. There are several reasons. First, they often contain a fair number of instructions already. And if the subroutine being called is fat, it makes the loop that calls it fat as well. The size of the loop may not be apparent when you look at the loop; the function call can conceal many more instructions.</para>
        <para id="id1168153514903">Second, when the calling routine and the subroutine are compiled separately, it’s impossible for the compiler to intermix instructions. A loop that is unrolled into a series of function calls behaves much like the original loop, before unrolling.</para>
        <para id="id1168146358541">Last, function call overhead is expensive. Registers have to be saved; argument lists have to be prepared. The time spent calling and returning from a subroutine can be much greater than that of the loop overhead. Unrolling to amortize the cost of the loop structure over several calls doesn’t buy you enough to be worth the effort.</para>
        <para id="id1168146502950">The general rule when dealing with procedures is to first try to eliminate them in the “remove clutter” phase, and when this has been done, check to see if unrolling gives an additional performance improvement.</para>
      </section>
      <section id="id6083815">
        <title>Loops with Branches in Them</title>
        <para id="id1168146571825">In <link document="m33720"/> we showed you how to eliminate certain types of branches, but of course, we couldn’t get rid of them all. In cases of iteration-independent branches, there might be some benefit to loop unrolling. The IF test becomes part of the operations that must be counted to determine the value of loop unrolling. Below is a doubly nested loop. The inner loop tests the value of <code display="inline">B(J,I)</code>:</para>
        <code id="id1168146352881" display="block"><newline/>
      DO I=1,N
        DO J=1,N
          IF (B(J,I) .GT. 1.0) A(J,I) = A(J,I) + B(J,I) * C 
        ENDDO
      ENDDO
    </code>
        <para id="id1168150251898">Each iteration is independent of every other, so unrolling it won’t be a problem. We’ll just leave the outer loop undisturbed:</para>
        <code id="id1168148933292" display="block"><newline/>
      II = IMOD (N,4) 
      DO I=1,N
        DO J=1,II
          IF (B(J,I) .GT. 1.0)
      +     A(J,I) = A(J,I) + B(J,I) * C 
          ENDDO
          DO J=II+1,N,4
            IF (B(J,I) .GT. 1.0)
      +       A(J,I) = A(J,I) + B(J,I) * C 
            IF (B(J+1,I) .GT. 1.0)
      +       A(J+1,I) = A(J+1,I) + B(J+1,I) * C 
            IF (B(J+2,I) .GT. 1.0)
      +       A(J+2,I) = A(J+2,I) + B(J+2,I) * C 
            IF (B(J+3,I) .GT. 1.0)
      +       A(J+3,I) = A(J+3,I) + B(J+3,I) * C 
          ENDDO
        ENDDO
    </code>
        <para id="id1168146354243">This approach works particularly well if the processor you are using supports conditional execution. As described earlier, conditional execution can replace a branch and an operation with a single conditionally executed assignment. On a superscalar processor with conditional execution, this unrolled loop executes quite nicely.</para>
      </section>
  </content>
</document>