<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Dependencies</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m32777</md:content-id>
  <md:title>Dependencies</md:title>
  <md:abstract/>
  <md:uuid>43261c34-ecca-43e0-af25-6a6773da473c</md:uuid>
</metadata>
<featured-links>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit below.
       Changes to the links section in the source will not be saved. -->
    <link-group type="supplemental">
      <link url="http://cnx.org/content/m32709/latest/" strength="3">Acknowledgements</link>
    </link-group>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit above.
       Changes to the links section in the source will not be saved. -->
</featured-links>
<content>
      <para id="id14034159">Imagine a symphony orchestra where each musician plays without regard to the conductor or the other musicians. At the first tap of the conductor’s baton, each musician goes through all of his or her sheet music. Some finish far ahead of others, leave the stage, and go home. The cacophony wouldn’t resemble music (come to think of it, it would resemble experimental jazz) because it would be totally uncoordinated. Of course this isn’t how music is played. A computer program, like a musical piece, is woven on a fabric that unfolds in time (though perhaps woven more loosely). Certain things must happen before or along with others, and there is a rate to the whole process.</para>
      <para id="id11805358">With computer programs, whenever event A must occur before event B can, we say that B is <emphasis effect="italics">dependent</emphasis> on A. We call the relationship between them a dependency. Sometimes dependencies exist because of calculations or memory operations; we call these <emphasis effect="italics">data dependencies</emphasis>. Other times, we are waiting for a branch or do-loop exit to take place; this is called a <emphasis effect="italics">control dependency</emphasis>. Each is present in every program to varying degrees. The goal is to eliminate as many dependencies as possible. Rearranging a program so that two chunks of the computation are less dependent exposes <emphasis effect="italics">parallelism</emphasis>, or opportunities to do several things at once.</para>
      <section id="id17125268">
        <title>Control Dependencies</title>
        <para id="id13662796">Just as variable assignments can depend on other assignments, a variable’s value can also depend on the <emphasis effect="italics">flow of control</emphasis> within the program. For instance, an assignment within an if-statement can occur only if the conditional evaluates to true. The same can be said of an assignment within a loop. If the loop is never entered, no statements inside the loop are executed.</para>
        <para id="id13442158">When calculations occur as a consequence of the flow of control, we say there is a <emphasis effect="italics">control dependency</emphasis>, as in the code below and shown graphically in <link target-id="id14213666"/>. The assignment located inside the block-if may or may not be executed, depending on the outcome of the test <code>X .NE. 0.</code> In other words, the value of <code>Y</code> depends on the flow of control in the code around it. Again, this may sound to you like a concern for compiler designers, not programmers, and that’s mostly true. But there are times when you might want to move control-dependent instructions around to get expensive calculations out of the way (provided your compiler isn’t smart enough to do it for you). For example, say that <link target-id="id11449556"/> represents a little section of your program. Flow of control enters at the top and goes through two branch decisions. Furthermore, say that there is a square root operation at the entry point, and that the flow of control almost always goes from the top, down to the leg containing the statement <code>A=0.0</code>. This means that the results of the calculation <code>A=SQRT(B)</code> are almost always discarded because A gets a new value of 0.0 each time through. A square root operation is always “expensive” because it takes a lot of time to execute. The trouble is that you can’t just get rid of it; occasionally it’s needed. However, you could move it out of the way and continue to observe the control dependencies by making two copies of the square root operation along the less traveled branches, as shown in <link target-id="id11092092"/>. This way the <code>SQRT</code> would execute only along those paths where it was actually needed.</para>
        <figure id="id14213666"><title>Control dependency</title><media id="id14213666_media" alt="This figure is a box containing four lines of code, with an arrow drawn from the middle of one line to the beginning of the following line.">
            <image mime-type="image/png" src="../../media/graphics1-26ee.png" id="id14213666__onlineimage" height="207" width="600"/>
          </media>
        <!--Figure 9-1--></figure>
        
        <figure id="id11449556"><title>A little section of your program</title><media id="id11449556_media" alt="This figure shows a line labeled A = SQRT(B) with branches breaking off at two points, with a branch labeled A = 0.0.">
            <image mime-type="image/png" src="../../media/graphics2-2483.png" id="id11449556__onlineimage" height="299" width="600"/>
          </media>
        <!--Figure 9-2--></figure>
        
        <para id="id21439340">This kind of instruction scheduling will be appearing in compilers (and even hardware) more and more as time goes on. A variation on this technique is to calculate results that might be needed at times when there is a gap in the instruction stream (because of dependencies), thus using some spare cycles that might otherwise be wasted.</para>
        <para id="id20123391">
          <figure id="id11092092"><title>Expensive operation moved so that it’s rarely executed</title><media id="id11092092_media" alt="This figure shows a line with branches breaking off at two points, with a branch labeled A = 0.0, and two other branches labeled A = SQRT(B).">
              <image mime-type="image/png" src="../../media/graphics3-1fcd.png" id="id11092092__onlineimage" height="299" width="600"/>
            </media>
          <!--Figure 9-3--></figure>
        </para>
        
      </section>
      <section id="id4204732">
        <title>Data Dependencies</title>
        <para id="id14264718">A calculation that is in some way bound to a previous calculation is said to be data dependent upon that calculation. In the code below, the value of <code>B</code> is data dependent on the value of <code>A</code>. That’s because you can’t calculate <code>B</code> until the value of <code>A</code> is available:</para>
        
        <code id="id19912681" display="block"><newline/>
      A = X + Y + COS(Z) 
      B = A * C 
    </code>
        <para id="id14320676">This dependency is easy to recognize, but others are not so simple. At other times, you must be careful not to rewrite a variable with a new value before every other computation has finished using the old value. We can group all data dependencies into three categories: (1) flow dependencies, (2) antidependencies, and (3) output dependencies. <link target-id="id15690950"/> contains some simple examples to demonstrate each type of dependency. In each example, we use an arrow that starts at the source of the dependency and ends at the statement that must be delayed by the dependency. The key problem in each of these dependencies is that the second statement can’t execute until the first has completed. Obviously in the particular output dependency example, the first computation is dead code and can be eliminated unless there is some intervening code that needs the values. There are other techniques to eliminate either output or antidependencies. The following example contains a flow dependency followed by an output dependency.</para>
        <para id="id15719579"/>
        <figure id="id15690950"><title>Types of data dependencies</title><media id="id15690950_media" alt="This figure shows three boxes, labeled, flow dependency, antidependency, and output dependency. Flow dependency shows arrows moving variables A and B to the right in between three equations. Antidependency shows movement of only variable A in the left direction. Output Dependency shows movement directly downward over three equations for variable A.">
            <image mime-type="image/png" src="../../media/graphics4-5284.png" id="id15690950__onlineimage" height="184" width="600"/>
          </media>
        <!--Figure 9-4--></figure>
        
        <code id="id10834938" display="block"><newline/>
      X = A / B 
      Y = X + 2.0
      X = D - E 
    </code>
        <para id="id15728362">While we can’t eliminate the flow dependency, the output dependency can be eliminated by using a scratch variable:</para>
        
        <code id="id20181583" display="block"><newline/>
      Xtemp = A/B
      Y = Xtemp + 2.0
      X = D - E 
    </code>
        <para id="id20001592">As the number of statements and the interactions between those statements increase, we need a better way to identify and process these dependencies. <link target-id="id20827602"/> shows four statements with four dependencies.</para>
        
        <para id="id20203686">
          <figure id="id20827602"><title>Multiple dependencies</title><media id="id20827602_media" alt="This figure is a box containing four equations, X = A + B, D = X * 17, A = B + C, and X = C + E. There are arrows between certain variables in each equation, and the equations are labeled from top to bottom, flow, anti, anti, and output.">
              <image mime-type="image/png" src="../../media/graphics5-7795.png" id="id20827602__onlineimage" height="289" width="600"/>
            </media>
          <!--Figure 9-5:--></figure>
        </para>
        
        <para id="id9410768">None of the second through fourth instructions can be started before the first instruction completes.</para>
      </section>
      <section id="id13358979">
        <title>Forming a DAG</title>
        <para id="id15796682">One method for analyzing a sequence of instructions is to organize it into a <emphasis effect="italics">directed acyclic graph</emphasis> (DAG).<footnote id="id13512483">A graph is a collection of nodes connected by edges. By directed, we mean that the edges can only be traversed in specified directions. The word acyclic means that there are no cycles in the graph; that is, you can’t loop anywhere within it.</footnote> Like the instructions it represents, a DAG describes all of the calculations and relationships between variables. The data flow within a DAG proceeds in one direction; most often a DAG is constructed from top to bottom. Identifiers and constants are placed at the “leaf ” nodes — the ones on the top. Operations, possibly with variable names attached, make up the internal nodes. Variables appear in their final states at the bottom. The DAG’s edges order the relationships between the variables and operations within it. All data flow proceeds from top to bottom.</para>
        <para id="id13509948">To construct a DAG, the compiler takes each intermediate language tuple and maps it onto one or more nodes. For instance, those tuples that represent binary operations, such as addition (<code>X=A+B</code>), form a portion of the DAG with two inputs (<code>A</code> and <code>B</code>) bound together by an operation (<code>+</code>). The result of the operation may feed into yet other operations within the basic block (and the DAG) as shown in <link target-id="id13513092"/>.</para>
        <para id="id9822428">
          <figure id="id13513092"><title>A trivial data flow graph</title><media id="id13513092_media" alt="This figure contains an equation, X = A + B, and a line connecting point A to point X, and point X to point B.">
              <image mime-type="image/png" src="../../media/graphics6.png" id="id13513092__onlineimage" height="215" width="600"/>
            </media>
          <!--Figure 9-6--></figure>
        </para>
        
        <para id="id12610976">For a basic block of code, we build our DAG in the order of the instructions. The DAG for the previous four instructions is shown in <link target-id="id19378053"/>. This particular example has many dependencies, so there is not much opportunity for parallelism. <link target-id="id13217021"/> shows a more straightforward example shows how constructing a DAG can identify parallelism.</para>
        <para id="id14029033">From this DAG, we can determine that instructions 1 and 2 can be executed in parallel. Because we see the computations that operate on the values <code>A</code> and <code>B</code> while processing instruction 4, we can eliminate a common subexpression during the construction of the DAG. If we can determine that <code>Z</code> is the only variable that is used outside this small block of code, we can assume the <code>Y</code> computation is dead code.</para>
        <para id="id11337275">
          <figure id="id19378053"><title>A more complex data flow graph</title><media id="id19378053_media" alt="This figure contains equations, X = A + B, D = X * 17, A = B + C, and X = C + E, and to the right of these equations is a flowchart expressing these equations together.">
              <image mime-type="image/png" src="../../media/graphics7.png" id="id19378053__onlineimage" height="349" width="600"/>
            </media>
          <!--Figure 9-7--></figure>
        </para>
        
        <para id="id18724175">By constructing the DAG, we take a sequence of instructions and determine which must be executed in a particular order and which can be executed in parallel. This type of data flow analysis is very important in the codegeneration phase on super-scalar processors. We have introduced the concept of dependencies and how to use data flow to find opportunities for parallelism in code sequences within a basic block. We can also use data flow analysis to identify dependencies, opportunities for parallelism, and dead code between basic blocks.</para>
      </section>
      <section id="id14022258">
        <title>Uses and Definitions</title>
        <para id="id16520841">As the DAG is constructed, the compiler can make lists of variable uses and <emphasis effect="italics">definitions</emphasis>, as well as other information, and apply these to global optimizations across many basic blocks taken together. Looking at the DAG in <link target-id="id13217021"/>, we can see that the variables defined are <code>Z</code>, <code>Y</code>, <code>X</code>, <code>C</code>, and <code>D</code>, and the variables used are <code>A</code> and <code>B</code>. Considering many basic blocks at once, we can say how far a particular variable definition reaches — where its value can be seen. From this we can recognize situations where calculations are being discarded, where two uses of a given variable are completely independent, or where we can overwrite register-resident values without saving them back to memory. We call this investigation <emphasis effect="italics">data flow analysis</emphasis>.</para>
        <para id="id20037272">
          <figure id="id13217021"><title>Extracting parallelism from a DAG</title><media id="id13217021_media" alt="This figure contains equations, X = A + B, Y = B + 3, D = X * 7, C = A + B, and Z = D + C, with a flowchart to the right expressing the relationship between the equations.">
              <image mime-type="image/png" src="../../media/graphics8.png" id="id13217021__onlineimage" height="430" width="600"/>
            </media>
          <!--Figure 9-8--></figure>
        </para>
        
        <para id="id13742090">To illustrate, suppose that we have the flow graph in <link target-id="id19987392"/>. Beside each basic block we’ve listed the variables it uses and the variables it defines. What can data flow analysis tell us?</para>
        <para id="id20001385">Notice that a value for <code>A</code> is defined in block <code>X</code> but only used in block <code>Y</code>. That means that <code>A</code> is dead upon exit from block <code>Y</code> or immediately upon taking the right-hand branch leaving <code>X</code>; none of the other basic blocks uses the value of A. That tells us that any associated resources, such as a register, can be freed for other uses.</para>
        <para id="id20071726">Looking at <link target-id="id19987392"/> we can see that <code>D</code> is defined in basic block <code>X</code>, but never used. This means that the calculations defining <code>D</code> can be discarded.</para>
        <para id="id10520266">Something interesting is happening with the variable <code>G</code>. Blocks <code>X</code> and <code>W</code> both use it, but if you look closely you’ll see that the two uses are distinct from one another, meaning that they can be treated as two independent variables.</para>
        <para id="id20173782"/>
        <para id="id13747183">A compiler featuring advanced instruction scheduling techniques might notice that <code>W</code> is the only block that uses the value for <code>E</code>, and so move the calculations defining <code>E</code> out of block <code>Y</code> and into <code>W</code>, where they are needed.</para>
        <figure id="id19987392"><title>Flow graph for data flow analysis</title><media id="id19987392_media" alt="This figure is a flowgraph of four rows, with a box in each row and arrows showing the relationship between the boxes, which are labeled, X, Y, W, and Z. To the right of the boxes, in their respective rows, are lists of letters under categories, Defines, and Uses.">
            <image mime-type="image/png" src="../../media/graphics9.png" id="id19987392__onlineimage" height="389" width="600"/>
          </media>
        <!--Figure 9-9--></figure>
        
        <para id="id20019192">In addition to gathering data about variables, the compiler can also keep information about subexpressions. Examining both together, it can recognize cases where redundant calculations are being made (across basic blocks), and substitute previously computed values in their place. If, for instance, the expression <code>H*I</code> appears in blocks <code>X</code>, <code>Y</code>, and <code>W</code>, it could be calculated just once in block <code>X</code> and propagated to the others that use it.</para>
      </section>
  </content>
</document>