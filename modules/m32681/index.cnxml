<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Registers</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m32681</md:content-id>
  <md:title>Registers</md:title>
  <md:abstract/>
  <md:uuid>3747207c-19a4-4954-a0d2-81555320026f</md:uuid>
</metadata>
<featured-links>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit below.
       Changes to the links section in the source will not be saved. -->
    <link-group type="supplemental">
      <link url="http://cnx.org/content/m32709/latest/" strength="3">Acknowledgements</link>
    </link-group>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit above.
       Changes to the links section in the source will not be saved. -->
</featured-links>
<content>
      <para id="id19461438">At least the top layer of the memory hierarchy, the CPU registers, operate as fast as the rest of the processor. The goal is to keep operands in the registers as much as possible. This is especially important for intermediate values used in a long computation such as:</para>
      <code id="id9038219" display="block">X = G * 2.41 + A / W - W * M
    </code>
      <para id="id9418720">While computing the value of A divided by W, we must store the result of multiplying G by 2.41. It would be a shame to have to store this intermediate result in memory and then reload it a few instructions later. On any modern processor with moderate optimization, the intermediate result is stored in a register. Also, the value W is used in two computations, and so it can be loaded once and used twice to eliminate a “wasted” load.</para>
      <para id="id6873185">Compilers have been very good at detecting these types of optimizations and efficiently making use of the available registers since the 1970s. Adding more registers to the processor has some performance benefit. It’s not practical to add enough registers to the processor to store the entire problem data. So we must still use the slower memory technology.</para>
  </content>
</document>