<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Introduction</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m33728</md:content-id>
  <md:title>Introduction</md:title>
  <md:abstract/>
  <md:uuid>ff08a38b-7f76-4099-847f-716f69eb8e12</md:uuid>
</metadata>

<content>
    <para id="id1164271723194">In nearly all high performance applications, loops are where the majority of the execution time is spent. In <link document="m33720"/> we examined ways in which application developers introduced clutter into loops, possibly slowing those loops down. In this chapter we focus on techniques used to improve the performance of these “clutter-free” loops. Sometimes the compiler is clever enough to generate the faster versions of the loops, and other times we have to do some rewriting of the loops ourselves to help the compiler.</para>
    <para id="id2519815">It’s important to remember that one compiler’s performance enhancing modifications are another compiler’s clutter. When you make modifications in the name of performance you must make sure you’re helping by testing the performance with and without the modifications. Also, when you move to another architecture you need to make sure that any modifications aren’t hindering performance. For this reason, you should choose your performance-related modifications wisely. You should also keep the original (simple) version of the code for testing on new architectures. Also if the benefit of the modification is small, you should probably keep the code in its most simple and clear form.</para>
    <para id="id1164259856608">We look at a number of different loop optimization techniques, including:</para>
    <list id="id1164242286986" list-type="bulleted">
      <item>Loop unrolling</item>
      <item>Nested loop optimization</item>
      <item>Loop interchange</item>
      <item>Memory reference optimization</item>
      <item>Blocking</item>
      <item>Out-of-core solutions</item>
    </list>
    <para id="id1164242492626">Someday, it may be possible for a compiler to perform all these loop optimizations automatically. Typically loop unrolling is performed as part of the normal compiler optimizations. Other optimizations may have to be triggered using explicit compile-time options. As you contemplate making manual changes, look carefully at which of these optimizations can be done by the compiler. Also run some tests to determine if the compiler optimizations are as good as hand optimizations.</para>
  </content>
</document>