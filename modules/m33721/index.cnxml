<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Subroutine Calls</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m33721</md:content-id>
  <md:title>Subroutine Calls</md:title>
  <md:abstract/>
  <md:uuid>d893323b-f73c-45e1-821c-77b12bc43743</md:uuid>
</metadata>

<content>
      <para id="id12982044">A typical corporation is full of frightening examples of overhead. Say your department has prepared a stack of paperwork to be completed by another department. What do you have to do to transfer that work? First, you have to be sure that your portion is completed; you can’t ask them to take over if the materials they need aren’t ready. Next, you need to package the materials — data, forms, charge numbers, and the like. And finally comes the official transfer. Upon receiving what you sent, the other department has to unpack it, do their job, repackage it, and send it back.</para>
      <para id="id5650762">A lot of time gets wasted moving work between departments. Of course, if the overhead is minimal compared to the amount of useful work being done, it won’t be that big a deal. But it might be more efficient for small jobs to stay within one department. The same is true of subroutine and function calls. If you only enter and exit modules once in a relative while, the overhead of saving registers and preparing argument lists won’t be significant. However, if you are repeatedly calling a few small subroutines, the overhead can buoy them to the top of the profile. It might be better if the work stayed where it was, in the calling routine.</para>
      <para id="id12924210">Additionally, subroutine calls inhibit compiler flexibility. Given the right opportunity, you’d like your compiler to have the freedom to intermix instructions that aren’t dependent upon each other. These are found on either side of a subroutine call, in the caller and callee. But the opportunity is lost when the compiler can’t peer into subroutines and functions. Instructions that might overlap very nicely have to stay on their respective sides of the artificial fence.</para>
      <para id="id12364362">It helps if we illustrate the challenge that subroutine boundaries present with an exaggerated example. The following loop runs very well on a wide range of processors:</para>
      <code id="id12902220" display="block"><newline/>
      DO I=1,N
        A(I) = A(I) + B(I) * C 
      ENDDO
    </code>
      <para id="id11907450">The code below performs the same calculations, but look at what we have done:</para>
      <code id="id12884807" display="block"><newline/>
      DO I=1,N
        CALL MADD (A(I), B(I), C) 
      ENDDO
      SUBROUTINE MADD (A,B,C)
      A = A + B * C 
      RETURN
      END
    </code>
      <para id="id11956025">Each iteration calls a subroutine to do a small amount of work that was formerly within the loop. This is a particularly painful example because it involves floating- point calculations. The resulting loss of parallelism, coupled with the procedure call overhead, might produce code that runs 100 times slower. Remember, these operations are pipelined, and it takes a certain amount of “wind-up” time before the throughput reaches one operation per clock cycle. If there are few floating-point operations to perform between subroutine calls, the time spent winding up and winding down pipelines figures prominently.</para>
      <para id="id12565081">Subroutine and function calls complicate the compiler’s ability to efficiently man- age <code display="inline">COMMON</code> and <code display="inline">external</code> variables, delaying until the last possible moment actually storing them in memory. The compiler uses registers to hold the “live” values of many variables. When you make a call, the compiler cannot tell whether the subroutine will be changing variables that are declared as <code display="inline">external</code> or <code display="inline">COMMON</code>. Therefore, it’s forced to store any modified <code display="inline">external</code> or <code display="inline">COMMON</code> variables back into memory so that the callee can find them. Likewise, after the call has returned, the same variables have to be reloaded into registers because the compiler can no longer trust the old, register-resident copies. The penalty for saving and restoring variables can be substantial, especially if you are using lots of them. It can also be unwarranted if variables that ought to be local are specified as <code display="inline">external</code> or <code display="inline">COMMON</code>, as in the following code:</para>
      <code id="id5907583" display="block"><newline/> 
      COMMON /USELESS/ K 
      DO K=1,1000
        IF (K .EQ. 1) CALL AUX 
      ENDDO
    </code>
      <para id="id11944432">In this example, K has been declared as a <code display="inline">COMMON</code> variable. It is used only as a do-loop counter, so there really is no reason for it to be anything but local. However, because it is in a <code display="inline">COMMON</code> block, the call to <code display="inline">AUX</code> forces the compiler to store and reload <code display="inline">K</code> each iteration. This is because the side effects of the call are unknown.</para>
      <para id="id6206755">So far, it looks as if we are preparing a case for huge main programs without any subroutines or functions! Not at all. Modularity is important for keeping source code compact and understandable. And frankly, the need for maintainability and modularity is always more important than the need for <emphasis effect="italics">small</emphasis> performance improvements. However, there are a few approaches for streamlining subroutine calls that don’t require you to scrap modular coding techniques: macros and procedure inlining.</para>
      <para id="id12926424">Remember, if the function or subroutine does a reasonable amount of work, procedure call overhead isn’t going to matter very much. However, if one small routine appears as a leaf node in one of the busiest sections of the call graph, you might want to think about inserting it in appropriate places in the program.</para>
      <section id="id6055529">
        <title>Macros</title>
        <para id="id11945485"><emphasis effect="italics">Macros</emphasis> are little procedures that are substituted inline at compile time. Unlike subroutines or functions, which are included once during the link, macros are replicated every place they are used. When the compiler makes its first pass through your program, it looks for patterns that match previous macro definitions and expands them inline. In fact, in later stages, the compiler sees an expanded macro as source code.</para>
        <para id="id5983799">Macros are part of both C and FORTRAN (although the FORTRAN notion of a macro, the <emphasis effect="italics">statement function</emphasis>, is reviled by the FORTRAN community, and won’t survive much longer).<footnote id="id5894199">The statement function has been eliminated in FORTRAN 90.</footnote> For C programs, macros are created with a <code display="inline">#define</code> construct, as demonstrated here:</para>
        <code id="id11932271" display="block"><newline/>
      #define average(x,y) ((x+y)/2)
      main ()
      {
         float q = 100, p = 50;
         float a;
         a = average(p,q);
         printf ("%f\n",a);
      }
    </code>
        <para id="id12503863">The first compilation step for a C program is a pass through the C preprocessor, <emphasis effect="italics">cpp</emphasis>. This happens automatically when you invoke the compiler. <emphasis effect="italics">cpp</emphasis> expands <code display="inline">#define</code> statements inline, replacing the pattern matched by the macro definition. In the program above, the statement:</para>
        <code id="id12924527" display="block"><newline/>
      a = average(p,q);
    </code>
        <para id="id12969626">gets replaced with:</para>
        <code id="id12566898" display="block"><newline/>
      a = ((p+q)/2);
    </code>
        <para id="id12925058">You have to be careful how you define the macro because it literally replaces the pattern located by <emphasis effect="italics">cpp</emphasis>. For instance, if the macro definition said:</para>
        <code id="id12913334" display="block"><newline/>
      #define multiply(a,b) (a*b)
    </code>
        <para id="id12913338">and you invoked it as:</para>
        <code id="id12982754" display="block"><newline/>
      c = multiply(x+t,y+v);
    </code>
        <para id="id6047098">the resulting expansion would be <code display="inline">x+t*y+v</code> — probably not what you intended.</para>
        <para id="id12893613">If you are a C programmer you may be using macros without being conscious of it. Many C header files (<emphasis effect="italics">.h</emphasis>) contain macro definitions. In fact, some “standard” C library functions are really defined as macros in the header files. For instance, the function <emphasis effect="italics">getchar</emphasis> can be linked in when you build your program. If you have a statement:</para>
        <code id="id12885544" display="block"><newline/>
      #include &lt;stdio.h&gt;
    </code>
        <para id="id12927823">in your file, <emphasis effect="italics">getchar</emphasis> is replaced with a macro definition at compile time, replacing the C library function.</para>
        <para id="id4986708">You can make <emphasis effect="italics">cpp</emphasis> macros work for FORTRAN programs too.<footnote id="id12523689">Some programmers use the standard UNIX <emphasis effect="italics">m4</emphasis> preprocessor for FORTRAN</footnote> For example, a FORTRAN version of the C program above might look like this:</para>
        <code id="id12469133" display="block"><newline/>
      #define AVERAG(X,Y) ((X+Y)/2) 
      C
            PROGRAM MAIN 
            REAL A,P,Q
            DATA P,Q /50.,100./ 
            A = AVERAG(P,Q) 
            WRITE (*,*) A
            END
    </code>
        <para id="id12926673">Without a little preparation, the <code display="inline">#define</code> statement is rejected by the FORTRAN compiler. The program first has to be preprocessed through <emphasis effect="italics">cpp</emphasis> to replace the use of <code display="inline">AVERAG</code> with its macro definition. It makes compilation a two-step procedure, but that shouldn’t be too much of a burden, especially if you are building your programs under the control of the <emphasis effect="italics">make</emphasis> utility. We would also suggest you store FORTRAN programs containing <emphasis effect="italics">cpp</emphasis> directives under <emphasis effect="italics">filename.F</emphasis> to distinguish them from unadorned FORTRAN. Just be sure you make your changes only to the <emphasis effect="italics">.F</emphasis> files and not to the output from <emphasis effect="italics">cpp</emphasis>. This is how you would preprocess FORTRAN <emphasis effect="italics">.F</emphasis> files by hand:</para>
        <code id="id12414161" display="block"><newline/>
      % /lib/cpp -P &lt; average.F &gt; average.f
      % f77 average.f -c
    </code>
        <para id="id11948469">The FORTRAN compiler never sees the original code. Instead, the macro definition is substituted inline as if you had typed it yourself:</para>
        <code id="id12428982" display="block"><newline/>
      C
            PROGRAM MAIN 
            REAL A,P,Q
            DATA P,Q /50.,100./ A = ((P+Q)/2)
            WRITE (*,*) A 
            END
    </code>
        <para id="id11935615">By the way, some FORTRAN compilers recognize the <emphasis effect="italics">.F</emphasis> extension already, making the two-step process unnecessary. If the compiler sees the <emphasis effect="italics">.F</emphasis> extension it invokes <emphasis effect="italics">cpp</emphasis> automatically, compiles the output, and throws away the intermediate <emphasis effect="italics">.f</emphasis> file. Try compiling a <emphasis effect="italics">.F</emphasis> on your computer to see if it works.</para>
        <para id="id11911847">Also, be aware that macro expansions may make source lines extend past column 72, which will probably make your FORTRAN compiler complain (or worse: it might pass unnoticed). Some compilers support input lines longer than 72 characters. On the Sun compilers the <emphasis effect="bold">–e</emphasis> option allows extended input lines up to 132 characters long.</para>
      </section>
      <section id="id12557857">
        <title>Procedure Inlining</title>
        <para id="id12233350">Macro definitions tend to be pretty short, usually just a single statement. Some- times you have slightly longer (but not too long) bits of code that might also benefit from being copied inline, rather than called as a subroutine or function. Again, the reason for doing this is to eliminate procedure call overhead and expose paral- lelism. If your compiler is capable of <emphasis effect="italics">inlining</emphasis> subroutine and function definitions into the modules that call them, then you have a very natural, very portable way to write modular code without suffering the cost of subroutine calls.</para>
        <para id="id12923625">Depending on the vendor, you can ask the compiler for procedure inlining by:</para>
        <list id="id8056168" list-type="bulleted">
          <item>Specifying which routines should be inlined on the compiler’s command line</item>
          <item>Putting inlining directives into the source program</item>
          <item>Letting the compiler inline automatically</item>
        </list>
        <para id="id12425094">The directives and compile line options are not standard, so you have to check your compiler documentation. Unfortunately, you may learn that there is no such feature (“yet,” always yet), or that it’s an expensive extra. The third form of inlining in the list, automatic, is available from just a few vendors. Automatic inlining depends on a sophisticated compiler that can view the definitions of several modules at once.</para>
        <para id="id11945503">There are some words of caution with regard to procedure inlining. You can easily do too much of it. If everything and anything is ingested into the body of its parents, the resulting executable may be so large that it repeatedly spills out of the instruction cache and becomes a net performance loss. Our advice is that you use the caller/callee information profilers give you and make some intelligent decisions about inlining, rather than trying to inline every subroutine available. Again, small routines that are called often are generally the best candidates for inlining.</para>
      </section>
   </content>
</document>