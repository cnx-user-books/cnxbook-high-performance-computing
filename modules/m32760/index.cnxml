<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Exceptions and Traps</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m32760</md:content-id>
  <md:title>Exceptions and Traps</md:title>
  <md:abstract/>
  <md:uuid>3b08f5ac-e2a7-4f7e-b3cc-d6fd72b81117</md:uuid>
</metadata>
<featured-links>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit below.
       Changes to the links section in the source will not be saved. -->
    <link-group type="supplemental">
      <link url="http://cnx.org/content/m32709/latest/" strength="3">Acknowledgements</link>
    </link-group>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit above.
       Changes to the links section in the source will not be saved. -->
</featured-links>
<content>
      <para id="id1170772842810">In addition to defining the results of computations that aren’t mathematically defined, the IEEE standard provides programmers with the ability to detect when these special values are being produced. This way, programmers can write their code without adding extensive IF tests throughout the code checking for the magnitude of values. Instead they can register a trap handler for an event such as underflow and handle the event when it occurs. The exceptions defined by the IEEE standard include:</para>
      <list id="id1170772388884" list-type="bulleted">
        <item>Overflow to infinity</item>
        <item>Underflow to zero</item>
        <item>Division by zero</item>
        <item>Invalid operation</item>
        <item>Inexact operation</item>
      </list>
      <para id="id1170775753666">According to the standard, these traps are under the control of the user. In most cases, the compiler runtime library manages these traps under the direction from the user through compiler flags or runtime library calls. Traps generally have significant overhead compared to a single floating-point instruction, and if a program is continually executing trap code, it can significantly impact performance.</para>
      <para id="id8428243">In some cases it’s appropriate to ignore traps on certain operations. A commonly ignored trap is the underflow trap. In many iterative programs, it’s quite natural for a value to keep reducing to the point where it “disappears.” Depending on the application, this may or may not be an error situation so this exception can be safely ignored.</para>
      <para id="id1170771933672">If you run a program and then it terminates, you see a message such as:</para>
      <code id="id1170772414209" display="block">Overflow handler called 10,000,000 times
    </code>
      <para id="id1170772036558">It probably means that you need to figure out why your code is exceeding the range of the floating-point format. It probably also means that your code is executing more slowly because it is spending too much time in its error handlers.</para>
  </content>
</document>