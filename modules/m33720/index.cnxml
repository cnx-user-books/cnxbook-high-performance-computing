<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Introduction</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m33720</md:content-id>
  <md:title>Introduction</md:title>
  <md:abstract/>
  <md:uuid>9645e40b-f5b7-4ff7-97ad-4f8d1b3adefb</md:uuid>
</metadata>

<content>
    <para id="id12621048">We have looked at code from the compiler’s point of view and at how to profile code to find the trouble spots. This is good information, but if you are dissatisfied with a code’s performance, you might still be wondering what to do about it. One possibility is that your code is too obtuse for the compiler to optimize properly. Excess code, too much modularization, or even previous optimization-related “improvements” can clutter up your code and confuse the compilers. Clutter is anything that contributes to the runtime without contributing to the answer. It comes in two forms:</para>
    
    <para id="eip-45"><title>Things that contribute to overhead</title>Subroutine calls, indirect memory references, tests within loops, wordy tests, type conversions, variables preserved unnecessarily
</para><para id="eip-666"><title>Things that restrict compiler flexibility</title>Subroutine calls, indirect memory references, tests within loops, ambiguous pointers
    </para><para id="id15577838">It’s not a mistake that some of the same items appear in both lists. Subroutine calls or if-statements within loops can both bite and scratch you by taking too much time and by creating <emphasis effect="italics">fences</emphasis> — places in the program where instructions that appear before can’t be safely intermixed with instructions that appear after, at least not without a great deal of care. The goal of this chapter is to show you how to eliminate clutter, so you can restructure what’s left over for the fastest execution. We save a few specific topics that might fit here, especially those regarding memory references, for later chapters where they are treated as subjects by themselves.</para>
    <para id="id12100418">Before we start, we’ll remind you: as you look for ways to improve what you have, keep your eyes and mind open to the possibility that there might be a fundamentally better way to do something—a more efficient sorting technique, random number generator, or solver. A different algorithm may buy you far more speed than tuning. Algorithms are beyond the scope of this book, but what we are discussing here should help you recognize “good” code, or help you to code a new algorithm to get the best performance.</para>
  </content>
</document>