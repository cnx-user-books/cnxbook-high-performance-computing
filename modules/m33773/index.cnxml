<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Closing Notes</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m33773</md:content-id>
  <md:title>Closing Notes</md:title>
  <md:abstract/>
  <md:uuid>840e1b26-f9ea-4e4f-995c-99dcb09aca6d</md:uuid>
</metadata>

<content>
      <para id="id1169375991988">Loops are the heart of nearly all high performance programs. The first goal with loops is to express them as simply and clearly as possible (i.e., eliminates the clutter). Then, use the profiling and timing tools to figure out which routines and loops are taking the time. Once you find the loops that are using the most time, try to determine if the performance of the loops can be improved.</para>
      <para id="id1169371508611">First try simple modifications to the loops that don’t reduce the clarity of the code. You can also experiment with compiler options that control loop optimizations. Once you’ve exhausted the options of keeping the code looking clean, and if you still need more performance, resort to hand-modifying to the code. Typically the loops that need a little hand-coaxing are loops that are making bad use of the memory architecture on a cache-based system. Hopefully the loops you end up changing are only a few of the overall loops in the program.</para>
      <para id="id1169379552508">However, before going too far optimizing on a single processor machine, take a look at how the program executes on a parallel system. Sometimes the modifications that improve performance on a single-processor system confuses the parallel-processor compiler. The compilers on parallel and vector systems generally have more powerful optimization capabilities, as they must identify areas of your code that will execute well on their specialized hardware. These compilers have been interchanging and unrolling loops automatically for some time now.</para>
  </content>
</document>