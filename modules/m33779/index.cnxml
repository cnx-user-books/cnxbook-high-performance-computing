<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Parallel Virtual Machine</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m33779</md:content-id>
  <md:title>Parallel Virtual Machine</md:title>
  <md:abstract/>
  <md:uuid>32ce996e-c7c2-48e0-bc85-32f13b5d3736</md:uuid>
</metadata>

<content>
      <para id="id6149396">The idea behind PVM is to assemble a diverse set of network-connected resources into a “virtual machine.” A user could marshal the resources of 35 idle workstations on the Internet and have their own personal scalable processing system. The work on PVM started in the early 1990s at Oak Ridge National Labs. PVM was pretty much an instant success among computer scientists. It provided a rough framework in which to experiment with using a network of workstations as a parallel processor.</para>
      <para id="id4154690">In PVM Version 3, your virtual machine can consist of single processors, shared-memory multiprocessors, and scalable multiprocessors. PVM attempts to knit all of these resources into a single, consistent, execution environment.</para>
      <para id="id1172521692693">To run PVM, you simply need a login account on a set of network computers that have the PVM software installed. You can even install it in your home directory. To create your own personal virtual machine, you would create a list of these computers in a file:</para>
      <code id="id1172537227574" display="block"><newline/>
      % cat hostfile
      frodo.egr.msu.edu
      gollum.egr.msu.edu
      mordor.egr.msu.edu
      %
    </code>
      <para id="id1172535662952">After some nontrivial machinations with paths and environment variables, you can start the PVM console:</para>
      <code id="id1172519532067" display="block"><newline/>
      % pvm hostfile
      pvmd already running. 
      pvm&gt; conf
      1 host, 1 data format
                          HOST     DTID     ARCH   SPEED 
                        frodo     40000 SUN4SOL2    1000
                        gollum    40001 SUN4SOL2    1000
                        mordor    40002 SUN4SOL2    1000
      pvm&gt; ps
                         HOST     TID   FLAG 0x COMMAND
                          frodo    40042     6/c,f pvmgs
      pvm&gt; reset 
      pvm&gt; ps
                         HOST     TID   FLAG 0x COMMAND
      pvm&gt;
    </code>
      <para id="id1963250">Many different users can be running virtual machines using the same pool of resources. Each user has their own view of an empty machine. The only way you might detect other virtual machines using your resources is in the percentage of the time your applications get the CPU.</para>
      <para id="id1172523619850">There is a wide range of commands you can issue at the PVM console. The <emphasis effect="italics">ps</emphasis> command shows the running processes in your virtual machine. It’s quite possible to have more processes than computer systems. Each process is time-shared on a system along with all the other load on the system. The <emphasis effect="italics">reset</emphasis> command performs a soft reboot on your virtual machine. You are the virtual system administrator of the virtual machine you have assembled.</para>
      <para id="id1172531639959">To execute programs on your virtual computer, you must compile and link your programs with the PVM library routines:<footnote id="id1172531393580">Note: the exact compilation may be different on your system.</footnote></para>
      <code id="id8227932" display="block"><newline/>
      % aimk mast slav
      making in SUN4SOL2/ for SUN4SOL2
      cc -O -I/opt/pvm3/include -DSYSVBFUNC -DSYSVSTR -DNOGETDTBLSIZ
            -DSYSVSIGNAL -DNOWAIT3 -DNOUNIXDOM -o mast
            ../mast.c -L/opt/pvm3/lib/SUN4SOL2 -lpvm3 -lnsl -lsocket
      mv mast ˜crs/pvm3/bin/SUN4SOL2
      cc -O -I/opt/pvm3/include -DSYSVBFUNC -DSYSVSTR -DNOGETDTBLSIZ
            -DSYSVSIGNAL -DNOWAIT3 -DNOUNIXDOM -o slav
            ../slav.c -L/opt/pvm3/lib/SUN4SOL2 -lpvm3 -lnsl -lsocket
      mv slav ˜crs/pvm3/bin/SUN4SOL2
      %
    </code>
      <para id="id1172539411883">When the first PVM call is encountered, the application contacts your virtual machine and enrolls itself in the virtual machine. At that point it should show up in the output of the <emphasis effect="italics">ps</emphasis> command issued at the PVM console.</para>
      <para id="id1172532709006">From that point on, your application issues PVM calls to create more processes and interact with those processes. PVM takes the responsibility for distributing the processes on the different systems in the virtual machine, based on the load and your assessment of each system’s relative performance. Messages are moved across the network using <emphasis effect="italics">user datagram protocol</emphasis> (UDP) and delivered to the appropriate process.</para>
      <para id="id1172532545707">Typically, the PVM application starts up some additional PVM processes. These can be additional copies of the same program or each PVM process can run a different PVM application. Then the work is distributed among the processes, and results are gathered as necessary.</para>
      <para id="id5234147">There are several basic models of computing that are typically used when working with PVM:</para>
      <list id="id1172530371254" list-type="labeled-item"><item><label>Master/Slave</label>: When operating in this mode, one process (usually the initial process) is designated as the master that spawns some number of worker processes. Work units are sent to each worker process, and the results are returned to the master. Often the master maintains a queue of work to be done and as a slave finishes, the master delivers a new work item to the slave. This approach works well when there is little data interaction and each work unit is independent. This approach has the advantage that the overall problem is naturally load-balanced even when there is some variation in the execution time of individual processes.</item>
        <item><label>Broadcast/Gather</label>: This type of application is typically characterized by the fact that the shared data structure is relatively small and can be easily copied into every processor’s node. At the beginning of the time step, all the global data structures are broadcast from the master process to all of the processes. Each process then operates on their portion of the data. Each process produces a partial result that is sent back and gathered by the master process. This pattern is repeated for each time step.</item>
        <item><label>SPMD/Data decomposition</label>: When the overall data structure is too large to have a copy stored in every process, it must be decomposed across multiple processes. Generally, at the beginning of a time step, all processes must exchange some data with each of their neighboring processes. Then with their local data augmented by the necessary subset of the remote data, they perform their computations. At the end of the time step, necessary data is again exchanged between neighboring processes, and the process is restarted.</item>
      </list>
      <para id="id1172535667645">The most complicated applications have nonuniform data flows and data that migrates around the system as the application changes and the load changes on the system.</para>
      <para id="id1172530370954">In this section, we have two example programs: one is a master-slave operation, and the other is a data decomposition-style solution to the heat flow problem.</para>
      <section id="id1172526002205">
        <title>Queue of Tasks</title>
        <para id="id1172519604820">In this example, one process (<code display="inline">mast</code>) creates five slave processes (<code display="inline">slav</code>) and doles out 20 work units (add one to a number). As a slave process responds, it’s given new work or told that all of the work units have been exhausted:</para>
        <code id="id2699652" display="block"><newline/>
      % cat mast.c
      #include &lt;stdio.h&gt;
      #include "pvm3.h"
    
      #define MAXPROC 5
      #define JOBS 20
    
      main()
      {
        int mytid,info;
        int tids[MAXPROC];
        int tid,input,output,answers,work;
    
        mytid = pvm_mytid();
        info=pvm_spawn("slav", (char**)0, 0, "", MAXPROC, tids);
    
      /* Send out the first work */
        for(work=0;work&lt;MAXPROC;work++) { 
          pvm_initsend(PvmDataDefault);
          pvm_pkint(&amp;work, 1, 1 ) ;
          pvm_send(tids[work],1) ;/* 1 = msgtype */
        }
    
      /* Send out the rest of the work requests */
        work = MAXPROC;
        for(answers=0; answers &lt; JOBS ; answers++) {
          pvm_recv( -1, 2 ); /* -1 = any task 2 = msgtype */
          pvm_upkint( &amp;tid, 1, 1 ); 
          pvm_upkint( &amp;input, 1, 1 );
          pvm_upkint( &amp;output, 1, 1 );
          printf("Thanks to %d 2*%d=%d\n",tid,input,output);
          pvm_initsend(PvmDataDefault);
          if ( work &lt; JOBS ) {
             pvm_pkint(&amp;work, 1, 1 ) ;
             work++;
          } else {
            input = -1;
            pvm_pkint(&amp;input, 1, 1 ) ; /* Tell them to stop */
          }
          pvm_send(tid,1) ;
        }
    
        pvm_exit();
      }
      %
    </code>
        <para id="id1172513133782">One of the interesting aspects of the PVM interface is the separation of calls to prepare a new message, pack data into the message, and send the message. This is done for several reasons. PVM has the capability to convert between different floating-point formats, byte orderings, and character formats. This also allows a single message to have multiple data items with different types.</para>
        <para id="id1172532727620">The purpose of the message type in each PVM send or receive is to allow the sender to wait for a particular type of message. In this example, we use two message types. Type one is a message from the master to the slave, and type two is the response.</para>
        <para id="id1172539487230">When performing a receive, a process can either wait for a message from a specific process or a message from any process.</para>
        <para id="id1172535857027">In the second phase of the computation, the master waits for a response from any slave, prints the response, and then doles out another work unit to the slave or tells the slave to terminate by sending a message with a value of -1.</para>
        <para id="id1172535740404">The slave code is quite simple — it waits for a message, unpacks it, checks to see if it is a termination message, returns a response, and repeats:</para>
        <code id="id2800754" display="block"><newline/>
      % cat slav.c
      #include &lt;stdio.h&gt;
      #include "pvm3.h"
    
      /* A simple program to double integers */
      main()
      {
        int mytid;
        int input,output;
        mytid = pvm_mytid();
    
        while(1) {
          pvm_recv( -1, 1 ); /* -1 = any task 1=msgtype */
          pvm_upkint(&amp;input, 1, 1);
          if ( input == -1 ) break; /* All done */
    
          output = input * 2;
          pvm_initsend( PvmDataDefault );
          pvm_pkint( &amp;mytid, 1, 1 );
          pvm_pkint( &amp;input, 1, 1 );
          pvm_pkint( &amp;output, 1, 1 );
          pvm_send( pvm_parent(), 2 );
        }
        pvm_exit();
      }
      %
    </code>
        <para id="id1172519659192">When the master program is executed, it produces the following output:</para>
        <code id="id1172519566036" display="block"><newline/>
      % pheat
      Thanks to 262204 2*0=0
      Thanks to 262205 2*1=2
      Thanks to 262206 2*2=4
      Thanks to 262207 2*3=6
      Thanks to 262204 2*5=10
      Thanks to 262205 2*6=12
      Thanks to 262206 2*7=14
      Thanks to 262207 2*8=16
      Thanks to 262204 2*9=18
      Thanks to 262205 2*10=20
      Thanks to 262206 2*11=22
      Thanks to 262207 2*12=24
      Thanks to 262205 2*14=28
      Thanks to 262207 2*16=32
      Thanks to 262205 2*17=34
      Thanks to 262207 2*18=36
      Thanks to 262204 2*13=26
      Thanks to 262205 2*19=38
      Thanks to 262206 2*15=30
      Thanks to 262208 2*4=8
      %
    </code>
        <para id="id1172521713275">Clearly the processes are operating in parallel, and the order of execution is somewhat random. This code is an excellent skeleton for handling a wide range of computations. In the next example, we perform an SPMD-style computation to solve the heat flow problem using PVM.</para>
      </section>
      <section id="id1172522053273">
        <title>Heat Flow in PVM</title>
        <para id="id1172530074826">This next example is a rather complicated application that implements the heat flow problem in PVM. In many ways, it gives some insight into the work that is performed by the HPF environment. We will solve a heat flow in a two-dimensional plate with four heat sources and the edges in zero-degree water, as shown in <link target-id="id1172519704567"/>.</para>
        <figure id="id1172519704567"><title>A two-dimensional plate with four constant heat sources</title><media id="id1172519704567_media" alt="This figure shows a box laying flat, lined with zeroes on the outside. Inside the box are four circles, labeled 10.0 in the top-left, -20.0 in the top-right, and 20.0 in two circles below.">
            <image mime-type="image/png" src="../../media/Picture 1-8dca.png" id="id1172519704567__onlineimage" height="160" width="700"/>
          </media>
        </figure>
        
        <para id="id1172530119523">The data will be spread across all of the processes using a (<code display="inline">*</code>, <code display="inline">BLOCK</code>) distribution. Columns are distributed to processes in contiguous blocks, and all the row elements in a column are stored on the same process. As with HPF, the process that “owns” a data cell performs the computations for that cell after retrieving any data necessary to perform the computation.</para>
        <para id="id7234736">We use a red-black approach but for simplicity, we copy the data back at the end of each iteration. For a true red-black, you would perform the computation in the opposite direction every other time step.</para>
        <para id="id5905587">Note that instead of spawning slave process, the parent process spawns additional copies of itself. This is typical of SPMD-style programs. Once the additional processes have been spawned, all the processes wait at a barrier before they look for the process numbers of the members of the group. Once the processes have arrived at the barrier, they all retrieve a list of the different process numbers:</para>
        <code id="id1172521608842" display="block"><newline/>
      % cat pheat.f
            PROGRAM PHEAT
            INCLUDE ’../include/fpvm3.h’
            INTEGER NPROC,ROWS,COLS,TOTCOLS,OFFSET 
            PARAMETER(NPROC=4,MAXTIME=200) 
            PARAMETER(ROWS=200,TOTCOLS=200) 
            PARAMETER(COLS=(TOTCOLS/NPROC)+3)
            REAL*8 RED(0:ROWS+1,0:COLS+1), BLACK(0:ROWS+1,0:COLS+1) 
            LOGICAL IAMFIRST,IAMLAST
            INTEGER INUM,INFO,TIDS(0:NPROC-1),IERR 
            INTEGER I,R,C
            INTEGER TICK,MAXTIME 
            CHARACTER*30 FNAME
    
      *     Get the SPMD thing going - Join the pheat group
            CALL PVMFJOINGROUP(’pheat’, INUM)
    
      * If we are the first in the pheat group, make some helpers
            IF ( INUM.EQ.0 ) THEN 
              DO I=1,NPROC-1
                CALL PVMFSPAWN(’pheat’, 0, ’anywhere’, 1, TIDS(I), IERR) 
              ENDDO
            ENDIF
    
      *     Barrier to make sure we are all here so we can look them up
            CALL PVMFBARRIER( ’pheat’, NPROC, INFO )
    
      * Find my pals and get their TIDs - TIDS are necessary for sending
            DO I=0,NPROC-1
              CALL PVMFGETTID(’pheat’, I, TIDS(I)) 
            ENDDO</code>
        <para id="id1172539268368">At this point in the code, we have <code display="inline">NPROC</code> processes executing in an <code display="inline">SPMD</code> mode. The next step is to determine which subset of the array each process will compute. This is driven by the <code display="inline">INUM</code> variable, which ranges from 0 to 3 and uniquely identifies these processes.</para>
        <para id="id8086982">We decompose the data and store only one quarter of the data on each process. Using the <code display="inline">INUM</code> variable, we choose our continuous set of columns to store and compute. The <code display="inline">OFFSET</code> variable maps between a “global” column in the entire array and a local column in our local subset of the array. <link target-id="id6835934"/> shows a map that indicates which processors store which data elements. The values marked with a B are boundary values and won’t change during the simulation. They are all set to 0. This code is often rather tricky to figure out. Performing a (<code display="inline">BLOCK</code>, <code display="inline">BLOCK</code>) distribution requires a two-dimensional decomposition and exchanging data with the neighbors above and below, in addition to the neighbors to the left and right:</para>
        <figure id="id6835934"><title>Assigning grid elements to processors</title><media id="id6835934_media" alt="This figure is a large chart, with rows and columns that are abbreviated but reach from 1 through 201. Inside, the first and last rows and first and last columns are lined with a B in every corresponding space. Inside this box of B's are cells consistently lined down their columns with values of 1, 2, or 3.">
            <image mime-type="image/png" src="../../media/Picture 2-ccfc.png" id="id6835934__onlineimage" height="241" width="700"/>
          </media>
        </figure>
        
        <code id="id1172531270169" display="block"><newline/>
      * Compute my geometry - What subset do I process? (INUM=0 values)
      * Actual Column = OFFSET + Column (OFFSET = 0)
      *     Column 0 = neighbors from left
      *     Column 1 = send to left
      *     Columns 1..mylen My cells to compute
      *     Column mylen = Send to right (mylen=50)
      *     Column mylen+1 = Neighbors from Right (Column 51)
    
            IAMFIRST = (INUM .EQ. 0) 
            IAMLAST = (INUM .EQ. NPROC-1) 
            OFFSET = (ROWS/NPROC * INUM ) 
            MYLEN = ROWS/NPROC
            IF ( IAMLAST ) MYLEN = TOTCOLS - OFFSET 
            PRINT *,’INUM:’,INUM,’ Local’,1,MYLEN,
           +                  ’ Global’,OFFSET+1,OFFSET+MYLEN
    
      * Start Cold
            DO C=0,COLS+1
              DO R=0,ROWS+1
                BLACK(R,C) = 0.0
              ENDDO 
            ENDDO
    </code>
        <para id="id1172532400060">Now we run the time steps. The first act in each time step is to reset the heat sources. In this simulation, we have four heat sources placed near the middle of the plate. We must restore all the values each time through the simulation as they are modified in the main loop:</para>
        <code id="id7262575" display="block"><newline/>
      * Begin running the time steps
            DO TICK=1,MAXTIME
    
      * Set the heat persistent sources
              CALL STORE(BLACK,ROWS,COLS,OFFSET,MYLEN,
           +     ROWS/3,TOTCOLS/3,10.0,INUM)
              CALL STORE(BLACK,ROWS,COLS,OFFSET,MYLEN,
           +     2*ROWS/3,TOTCOLS/3,20.0,INUM)
              CALL STORE(BLACK,ROWS,COLS,OFFSET,MYLEN,
           +     ROWS/3,2*TOTCOLS/3,-20.0,INUM)
              CALL STORE(BLACK,ROWS,COLS,OFFSET,MYLEN,
           +     2*ROWS/3,2*TOTCOLS/3,20.0,INUM)
    </code>
        <para id="id4486945">Now we perform the exchange of the “ghost values” with our neighboring processes. For example, Process 0 contains the elements for global column 50. To compute the next time step values for column 50, we need column 51, which is stored in Process 1. Similarly, before Process 1 can compute the new values for column 51, it needs Process 0’s values for column 50.</para>
        <para id="id1931461"><link target-id="id3934927"/> shows how the data is transferred between processors. Each process sends its leftmost column to the left and its rightmost column to the right. Because the first and last processes border unchanging boundary values on the left and right respectively, this is not necessary for columns one and 200. If all is done properly, each process can receive its ghost values from their left and right neighbors.</para>
        <para id="id1172519704004">
          <figure id="id3934927"><title>Pattern of communication for ghost values</title><media id="id3934927_media" alt="This figure is a flowchart and diagram describing how data is transferred between processors. There are four boxes, lined with letters B or G, and labeled inside as Tasks 1 through 4. Between the boxes are arrows showing movement between them.">
              <image mime-type="image/png" src="../../media/Picture 3-6f09.png" id="id3934927__onlineimage" height="390" width="700"/>
            </media>
          </figure>
        </para>
        
        <para id="id7168153">The net result of all of the transfers is that for each space that must be computed, it’s surrounded by one layer of either boundary values or ghost values from the right or left neighbors:</para>
        <code id="id1172522830092" display="block"><newline/>
      * Send left and right
              IF ( .NOT. IAMFIRST ) THEN
                CALL PVMFINITSEND(PVMDEFAULT,TRUE)
                CALL PVMFPACK( REAL8, BLACK(1,1), ROWS, 1, INFO ) 
                CALL PVMFSEND( TIDS(INUM-1), 1, INFO )
              ENDIF
              IF ( .NOT. IAMLAST ) THEN
                CALL PVMFINITSEND(PVMDEFAULT,TRUE)
                CALL PVMFPACK( REAL8, BLACK(1,MYLEN), ROWS, 1, INFO ) 
                CALL PVMFSEND( TIDS(INUM+1), 2, INFO )
              ENDIF
      * Receive right, then left
              IF ( .NOT. IAMLAST ) THEN
                 CALL PVMFRECV( TIDS(INUM+1), 1, BUFID )
                 CALL PVMFUNPACK ( REAL8, BLACK(1,MYLEN+1), ROWS, 1, INFO
              ENDIF
              IF ( .NOT. IAMFIRST ) THEN
                CALL PVMFRECV( TIDS(INUM-1), 2, BUFID )
                CALL PVMFUNPACK ( REAL8, BLACK(1,0), ROWS, 1, INFO) 
              ENDIF
    </code>
        <para id="id8275003">This next segment is the easy part. All the appropriate ghost values are in place, so we must simply perform the computation in our subspace. At the end, we copy back from the <code display="inline">RED</code> to the <code display="inline">BLACK</code> array; in a real simulation, we would perform two time steps, one from <code display="inline">BLACK</code> to <code display="inline">RED</code> and the other from <code display="inline">RED</code> to <code display="inline">BLACK</code>, to save this extra copy:</para>
        <code id="id1484694" display="block"><newline/>
      * Perform the flow
              DO C=1,MYLEN 
                DO R=1,ROWS
                  RED(R,C) = ( BLACK(R,C) +
           +                   BLACK(R,C-1) + BLACK(R-1,C) +
           +                   BLACK(R+1,C) + BLACK(R,C+1) ) / 5.0
                ENDDO 
              ENDDO
    
      * Copy back - Normally we would do a red and black version of the loop
              DO C=1,MYLEN 
                DO R=1,ROWS
                  BLACK(R,C) = RED(R,C) 
                ENDDO
              ENDDO
            ENDDO
    </code>
        <para id="id1172519400773">Now we find the center cell and send to the master process (if necessary) so it can be printed out. We also dump out the data into files for debugging or later visualization of the results. Each file is made unique by appending the instance number to the filename. Then the program terminates:</para>
        
        <code id="id6119661" display="block"><newline/>
            CALL SENDCELL(RED,ROWS,COLS,OFFSET,MYLEN,INUM,TIDS(0),
           +       ROWS/2,TOTCOLS/2)
    
      * Dump out data for verification
            IF ( ROWS .LE. 20 ) THEN
              FNAME = ’/tmp/pheatout.’ // CHAR(ICHAR(’0’)+INUM)
              OPEN(UNIT=9,NAME=FNAME,FORM=’formatted’)
              DO C=1,MYLEN
                WRITE(9,100)(BLACK(R,C),R=1,ROWS)
      100        FORMAT(20F12.6) 
              ENDDO
             CLOSE(UNIT=9)
           ENDIF
      * Lets all go together
            CALL PVMFBARRIER( ’pheat’, NPROC, INFO )
            CALL PVMFEXIT( INFO )
    
            END
    </code>
        <para id="id1172530009658">The <code display="inline">SENDCELL</code> routine finds a particular cell and prints it out on the master process. This routine is called in an <code display="inline">SPMD</code> style: all the processes enter this routine although all not at precisely the same time. Depending on the <code display="inline">INUM</code> and the cell that we are looking for, each process may do something different.</para>
        <para id="id1172531160167">If the cell in question is in the master process, and we are the master process, print it out. All other processes do nothing. If the cell in question is stored in another process, the process with the cell sends it to the master processes. The master process receives the value and prints it out. All the other processes do nothing.</para>
        <para id="id1172532548445">This is a simple example of the typical style of SPMD code. All the processes execute the code at roughly the same time, but, based on information local to each process, the actions performed by different processes may be quite different:</para>
        <code id="id1172507797010" display="block"><newline/>
SUBROUTINE SENDCELL(RED,ROWS,COLS,OFFSET,MYLEN,INUM,PTID,R,C)
            INCLUDE ’../include/fpvm3.h’
            INTEGER ROWS,COLS,OFFSET,MYLEN,INUM,PTID,R,C
            REAL*8 RED(0:ROWS+1,0:COLS+1)
            REAL*8 CENTER
    
      * Compute local row number to determine if it is ours
            I = C - OFFSET
            IF ( I .GE. 1 .AND. I.LE. MYLEN ) THEN
              IF ( INUM .EQ. 0 ) THEN
                PRINT *,’Master has’, RED(R,I), R, C, I
              ELSE
                CALL PVMFINITSEND(PVMDEFAULT,TRUE)
                CALL PVMFPACK( REAL8, RED(R,I), 1, 1, INFO )
                PRINT *, ’INUM:’,INUM,’ Returning’,R,C,RED(R,I),I
                CALL PVMFSEND( PTID, 3, INFO )
              ENDIF
            ELSE
              IF ( INUM .EQ. 0 ) THEN
                CALL PVMFRECV( -1 , 3, BUFID )
                CALL PVMFUNPACK ( REAL8, CENTER, 1, 1, INFO)
                PRINT *, ’Master Received’,R,C,CENTER
              ENDIF
            ENDIF
            RETURN
            END
    </code>
        <para id="id1172521940686">Like the previous routine, the <code display="inline">STORE</code> routine is executed on all processes. The idea is to store a value into a <emphasis effect="italics">global</emphasis> row and column position. First, we must determine if the cell is even in our process. If the cell is in our process, we must compute the local column (I) in our subset of the overall matrix and then store the value:</para>
        <code id="id5697247" display="block"><newline/>
      SUBROUTINE STORE(RED,ROWS,COLS,OFFSET,MYLEN,R,C,VALUE,INUM)
      REAL*8 RED(0:ROWS+1,0:COLS+1)
      REAL VALUE
      INTEGER ROWS,COLS,OFFSET,MYLEN,R,C,I,INUM
      I = C - OFFSET
      IF ( I .LT. 1 .OR. I .GT. MYLEN ) RETURN
      RED(R,I) = VALUE
      RETURN
      END
    </code>
        <para id="id1172514067505">When this program executes, it has the following output:</para>
        <code id="id1172517629666" display="block"><newline/>
      % pheat
       INUM: 0 Local 1 50 Global 1 50
       Master Received 100 100 3.4722390023541D-07
      %
    </code>
        <para id="id1172518563934">We see two lines of print. The first line indicates the values that Process 0 used in its geometry computation. The second line is the output from the master process of the temperature at cell (100,100) after 200 time steps.</para>
        <para id="id1172521724761">One interesting technique that is useful for debugging this type of program is to change the number of processes that are created. If the program is not quite moving its data properly, you usually get different results when different numbers of processes are used. If you look closely, the above code performs correctly with one process or 30 processes.</para>
        <para id="id5279393">Notice that there is no barrier operation at the end of each time step. This is in contrast to the way parallel loops operate on shared uniform memory multiprocessors that force a barrier at the end of each loop. Because we have used an “owner computes” rule, and nothing is computed until all the required ghost data is received, there is no need for a barrier. The receipt of the messages with the proper ghost values allows a process to begin computing immediately without regard to what the other processes are currently doing.</para>
        <para id="id1172532685220">This example can be used either as a framework for developing other grid-based computations, or as a good excuse to use HPF and appreciate the hard work that the HPF compiler developers have done. A well-done HPF implementation of this simulation should outperform the PVM implementation because HPF can make tighter optimizations. Unlike us, the HPF compiler doesn’t have to keep its generated code readable.</para>
      </section>
      <section id="id1172536048372">
        <title>PVM Summary</title>
        <para id="id1172512906977">PVM is a widely used tool because it affords portability across every architecture other than SIMD. Once the effort has been invested in making a code message passing, it tends to run well on many architectures.</para>
        <para id="id1172535855126">The primary complaints about PVM include:</para>
        <list id="id6562358" list-type="bulleted">
          <item>The need for a pack step separate from the send step</item>
          <item>The fact that it is designed to work in a heterogeneous environment that may incur some overhead</item>
          <item>It doesn’t automate common tasks such as geometry computations</item>
        </list>
        <para id="id1172517672210">But all in all, for a certain set of programmers, PVM is the tool to use. If you would like to learn more about PVM see <emphasis effect="italics">PVM — A User’s Guide and Tutorial for Networked Parallel Computing</emphasis>, by Al Geist, Adam Beguelin, Jack Dongarra, Weicheng Jiang, Robert Manchek, and Vaidy Sunderam (MIT Press). Information is also available at <link url="www.netlib.org/pvm3/">www.netlib.org/pvm3/</link>.</para>
      </section>
  </content>
</document>