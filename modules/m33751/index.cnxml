<document xmlns="http://cnx.rice.edu/cnxml">
  <title>Data-Parallel Problem: Heat Flow</title>
<metadata xmlns:md="http://cnx.rice.edu/mdml">
  <md:content-id>m33751</md:content-id>
  <md:title>Data-Parallel Problem: Heat Flow</md:title>
  <md:abstract/>
  <md:uuid>9c390989-0641-4128-9ed6-4f030bf0a836</md:uuid>
</metadata>

<content>
      <para id="id16934357">A classic problem that explores scalable parallel processing is the heat flow problem. The physics behind this problem lie in partial differential equations.</para>
      <para id="id8096468">We will start with a one-dimensional metal plate (also known as a rod), and move to a two-dimensional plate in later examples. We start with a rod that is at zero degrees celsius. Then we place one end in 100 degree steam and the other end in zero degree ice. We want to simulate how the heat flows from one end to another. And the resulting temperatures along points on the metal rod after the temperature has stabilized.</para>
      <para id="id9957412">To do this we break the rod into 10 segments and track the temperature over time for each segment. Intuitively, within a time step, the next temperature of a portion of the plate is an average of the surrounding temperatures. Given fixed temperatures at some points in the rod, the temperatures eventually converge to a steady state after sufficient time steps. <link target-id="id9765877"/> shows the setup at the beginning of the simulation.</para>
      <figure id="id9765877"><title>Heat flow in a rod</title><media id="id9765877_media" alt="This figure is a flow chart showing boxes starting with 100 and followed by a string of boxes labeled 0. The boxes are also numbered from 1 to 10. There is an arrow pointing to the right, labeled, heat will flow, and below the fourth, fifth, and sixth boxes is the label, average.">
          <image mime-type="image/png" src="../../media/graphics1-e34e.png" id="id9765877__onlineimage" height="219" width="600"/>
        </media>
        
      <!--figure 13-1--></figure>
      <para id="id6138400">A simplistic implementation of this is as follows:</para>
      <code id="id11314690" display="block"><newline/>
      PROGRAM HEATROD 
      PARAMETER(MAXTIME=200) 
      INTEGER TICKS,I,MAXTIME 
      REAL*4 ROD(10)
      ROD(1) = 100.0
      DO I=2,9
        ROD(I) = 0.0
      ENDDO
      ROD(10) = 0.0
      DO TICKS=1,MAXTIME
        IF ( MOD(TICKS,20) .EQ. 1 ) PRINT 100,TICKS,(ROD(I),I=1,10) 
        DO I=2,9
          ROD(I) = (ROD(I-1) + ROD(I+1) ) / 2
        ENDDO 
      ENDDO
100   FORMAT(I4,10F7.2)
      END
    </code>
      <para id="id9880318">The output of this program is as follows:</para>
      <code id="id3045635" display="block"><newline/>
% f77 heatrod.f 
heatrod.f:
 MAIN heatrod:
% a.out
   1 100.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00  0.00
  21 100.00  87.04  74.52  62.54  51.15  40.30  29.91  19.83   9.92  0.00
  41 100.00  88.74  77.51  66.32  55.19  44.10  33.05  22.02  11.01  0.00
  61 100.00  88.88  77.76  66.64  55.53  44.42  33.31  22.21  11.10  0.00
  81 100.00  88.89  77.78  66.66  55.55  44.44  33.33  22.22  11.11  0.00
 101 100.00  88.89  77.78  66.67  55.56  44.44  33.33  22.22  11.11  0.00
 121 100.00  88.89  77.78  66.67  55.56  44.44  33.33  22.22  11.11  0.00
 141 100.00  88.89  77.78  66.67  55.56  44.44  33.33  22.22  11.11  0.00
 161 100.00  88.89  77.78  66.67  55.56  44.44  33.33  22.22  11.11  0.00
 181 100.00  88.89  77.78  66.67  55.56  44.44  33.33  22.22  11.11  0.00
%
    </code>
      <para id="id14183444">Clearly, by Time step 101, the simulation has converged to two decimal places of accuracy as the numbers have stopped changing. This should be the steady-state approximation of the temperature at the center of each segment of the bar.</para>
      <para id="id9805531">Now, at this point, astute readers are saying to themselves, "Um, don't look now, but that loop has a flow dependency." You would also claim that this won't even parallelize a little bit. It is so bad you can't even unroll the loop for a little instruction-level parallelism!</para>
      <para id="id14125917">A person familiar with the theory of heat flow will also point out that the above loop doesn't <emphasis effect="italics">exactly</emphasis> implement the heat flow model. The problem is that the values on the right side of the assignment in the ROD loop are supposed to be from the previous time step, and that the value on the left side is the next time step. Because of the way the loop is written, the ROD(I-1) value is from the next time step, as shown in <link target-id="id9834383"/>.</para>
      <para id="id13891705">This can be solved using a technique called <emphasis effect="italics">red-black</emphasis>, where we alternate between two arrays. <link target-id="id14172064"/> shows how the red-black version of the computation operates. This kills two birds with one stone! Now the mathematics is precisely correct, <emphasis effect="italics">and</emphasis> there is no recurrence. Sounds like a real win-win situation.</para>
      <para id="id9834383">
        <figure id="id11121403"><title>Computing the new value for a cell</title><media id="id11121403_media" alt="This figure is a flow chart showing boxes starting with 100 and followed by a string of boxes labeled 50, 25, 12.5, then six boxes labeled 0. The boxes are also numbered from 1 to 10. Below the fourth, fifth, and sixth boxes is the label, average.">
            <image mime-type="image/png" src="../../media/graphics2-9b3a.png" id="id11121403__onlineimage" height="151" width="600"/>
          </media>
          
        <!--figure 13-2--></figure>
      </para>
      <figure id="id14172064"><title>Using two arrays to eliminate a dependency</title><media id="id14172064_media" alt="This figure is a flow chart showing boxes starting with 100 and followed by a string of boxes labeled  0. The boxes are also numbered from old 1 to old 10. Below the fourth, fifth, and sixth boxes is the label, average. This average is encompassed by a large arrow that points down to another flow chart showing boxes starting with 100 and 50 and followed by a string of boxes labeled  0. The boxes are also numbered from fixed 1 to fixed 10.">
          <image mime-type="image/png" src="../../media/graphics3-b411.png" id="id14172064__onlineimage" height="292" width="599"/>
        </media>
        
      <!-- figure 13-3--></figure>
      <para id="id14167005">The only downside to this approach is that it takes twice the memory storage and twice the memory bandwidth.<footnote id="id8233623">There is another red-black approach that computes first the even elements and then the odd elements of the rod in two passes. This approach has no data dependencies within each pass. The ROD array never has all the values from the same time step. Either the odd or even values are one time step ahead of the other. It ends up with a stride of two and doubles the bandwidth but does not double the memory storage required to solve the problem.</footnote> The modified code is as follows:</para>
      <code id="id17037696" display="block"><newline/>
      PROGRAM HEATRED 
      PARAMETER(MAXTIME=200) 
      INTEGER TICKS,I,MAXTIME 
      REAL*4 RED(10),BLACK(10)
    
      RED(1) = 100.0
      BLACK(1) = 100.0
      DO I=2,9
        RED(I) = 0.0
      ENDDO
      RED(10) = 0.0
      BLACK(10) = 0.0
    
      DO TICKS=1,MAXTIME,2
        IF ( MOD(TICKS,20) .EQ. 1 ) PRINT 100,TICKS,(RED(I),I=1,10) 
        DO I=2,9
          BLACK(I) = (RED(I-1) + RED(I+1) ) / 2
        ENDDO
        DO I=2,9
          RED(I) = (BLACK(I-1) + BLACK(I+1) ) / 2
        ENDDO 
      ENDDO
100   FORMAT(I4,10F7.2) 
      END
    </code>
      <para id="id15731769">The output for the modified program is:</para>
      <code id="id10808923" display="block"><newline/>
% f77 heatred.f 
heatred.f:
 MAIN heatred:
% a.out
   1 100.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00   0.00  0.00
  21 100.00  82.38  66.34  50.30  38.18  26.06  18.20  10.35   5.18  0.00
  41 100.00  87.04  74.52  61.99  50.56  39.13  28.94  18.75   9.38  0.00
  61 100.00  88.36  76.84  65.32  54.12  42.91  32.07  21.22  10.61  0.00
  81 100.00  88.74  77.51  66.28  55.14  44.00  32.97  21.93  10.97  0.00
 101 100.00  88.84  77.70  66.55  55.44  44.32  33.23  22.14  11.07  0.00
 121 100.00  88.88  77.76  66.63  55.52  44.41  33.30  22.20  11.10  0.00
 141 100.00  88.89  77.77  66.66  55.55  44.43  33.32  22.22  11.11  0.00
 161 100.00  88.89  77.78  66.66  55.55  44.44  33.33  22.22  11.11  0.00
 181 100.00  88.89  77.78  66.67  55.55  44.44  33.33  22.22  11.11  0.00
%
    </code>
      <para id="id9233276">Interestingly, the modified program takes longer to converge than the first version. It converges at Time step 181 rather than 101. If you look at the first version, because of the recurrence, the heat ended up flowing up faster from left to right because the left element of each average was the next-time-step value. It may seem nifty, but it's wrong.<footnote id="id12892923">There are other algorithmic approaches to solving partial differential equations, such as the "fast multipole method" that accelerates convergence "legally." Don't assume that the brute force approach used here is the only method to solve this particular problem. Programmers should always look for the best available algorithm (parallel or not) before trying to scale up the "wrong" algorithm. For folks other than computer scientists, time to solution is more important than linear speed-up.</footnote> Generally, in this problem, either approach converges to the same eventual values within the limits of floating-point representation.</para>
      <para id="id6563124">This heat flow problem is extremely simple, and in its red-black form, it's inherently very parallel with very simple data interactions. It's a good model for a wide range of problems where we are discretizing two-dimensional or three-dimensional space and performing some simple simulations in that space.</para>
      <para id="id9115481">This problem can usually be scaled up by making a finer grid. Often, the benefit of scalable processors is to allow a finer grid rather than a faster time to solution. For example, you might be able to to a worldwide weather simulation using a 200-mile grid in four hours on one processor. Using 100 processors, you may be able to do the simulation using a 20-mile grid in four hours with much more accurate results. Or, using 400 processors, you can do the finer grid simulation in one hour.</para>
  </content>
</document>